mongod> use test_db
switched to db test_db
test_db> show collections

test_db> use local
switched to db local
local> show collections
startup_log
local> use test_db
switched to db test_db
test_db> db.createCollection('users')
{ ok: 1 }
test_db> show collections
users
test_db> show users
[]
test_db> db.users.insert({name:"Bobby", age: 31, height: "5ft 8in"})
DeprecationWarning: Collection.insert() is deprecated. Use insertOne, insertMany, or bulkWrite.
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("6356ecc6200d78aa041edc12") }
}
test_db> show users
[]
test_db> show collections
users
test_db> db.users.insertOne({name:"Bobby", age: 31, height: "5ft 8in"})
{
  acknowledged: true,
  insertedId: ObjectId("6356ece4200d78aa041edc13")
}
test_db> show collections
users
test_db> shos users
Uncaught:
SyntaxError: Missing semicolon. (1:4)

> 1 | shos users
    |     ^
  2 |
my_first_db>
test_db> show users
[]
test_db> show documents
MongoshInvalidInputError: [COMMON-10001] 'documents' is not a valid argument for "show".
test_db> db
test_db
test_db> show collections
users
test_db> db.users.inserOne({name: "Hannah"{)
Uncaught:
SyntaxError: Unexpected token, expected "," (1:33)

> 1 | db.users.inserOne({name: "Hannah"{)
    |                                  ^
  2 |

test_db> db.users.inserOne({name: "Hannah"})
TypeError: db.users.inserOne is not a function
test_db> db.users.insertOne({name: "Hannah"})
{
  acknowledged: true,
  insertedId: ObjectId("6356ee8e200d78aa041edc14")
}
test_db> db.users.find()
[
  {
    _id: ObjectId("6356ecc6200d78aa041edc12"),
    name: 'Bobby',
    age: 31,
    height: '5ft 8in'
  },
  {
    _id: ObjectId("6356ece4200d78aa041edc13"),
    name: 'Bobby',
    age: 31,
    height: '5ft 8in'
  },
  { _id: ObjectId("6356ee8e200d78aa041edc14"), name: 'Hannah' }
]
test_db> db.users.find().pretty
[Function: pretty] {
  returnType: 'this',
  serverVersions: [ '0.0.0', '999.999.999' ],
  apiVersions: [ 0, Infinity ],
  topologies: [ 'ReplSet', 'Sharded', 'LoadBalanced', 'Standalone' ],
  returnsPromise: false,
  deprecated: false,
  platforms: [ 'Compass', 'Browser', 'CLI' ],
  isDirectShellCommand: false,
  acceptsRawInput: false,
  shellCommandCompleter: undefined,
  help: [Function (anonymous)] Help
}
test_db> db.users.find().pretty()
[
  {
    _id: ObjectId("6356ecc6200d78aa041edc12"),
    name: 'Bobby',
    age: 31,
    height: '5ft 8in'
  },
  {
    _id: ObjectId("6356ece4200d78aa041edc13"),
    name: 'Bobby',
    age: 31,
    height: '5ft 8in'
  },
  { _id: ObjectId("6356ee8e200d78aa041edc14"), name: 'Hannah' }
]
test_db> db.users.find(name:"Bobby")

test_db> db.users.update({name:"Hannah"},{age: 30, height: "5ft 7in"})
DeprecationWarning: Collection.update() is deprecated. Use updateOne, updateMany, or bulkWrite.
MongoInvalidArgumentError: Update document requires atomic operators
test_db> db.users.update({name:"Hannah"},{age: 30})
MongoInvalidArgumentError: Update document requires atomic operators
test_db> db.users.find({name:"Hanna"})

test_db> db.users.find({name:"Hannah"})
[ { _id: ObjectId("6356ee8e200d78aa041edc14"), name: 'Hannah' } ]
test_db> db.users.update({name:"Hannah"},{$set{age: 30, height: "5ft 7in"}})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:37)

> 1 | db.users.update({name:"Hannah"},{$set{age: 30, height: "5ft 7in"}})
    |                                      ^
  2 |

test_db> db.users.update({name:"Hannah"},{$set:{age: 30, height: "5ft 7in"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
test_db> db.users.find({name:"Hannah"})
[
  {
    _id: ObjectId("6356ee8e200d78aa041edc14"),
    name: 'Hannah',
    age: 30,
    height: '5ft 7in'
  }
]
test_db> db.users.inserOne({name:"Bobby", age: 31, height:"5ft 8in"})
TypeError: db.users.inserOne is not a function
test_db> db.users.insertOne({name:"Bobby", age: 31, height:"5ft 8in"})
{
  acknowledged: true,
  insertedId: ObjectId("6356f3e6200d78aa041edc15")
}
test_db> db.users.find({age:{$gt:30}})
[
  {
    _id: ObjectId("6356f3e6200d78aa041edc15"),
    name: 'Bobby',
    age: 31,
    height: '5ft 8in'
  }
]
test_db> db.users.find({age:{$in:30}})
MongoServerError: $in needs an array
test_db> db.users.inserOne({name:"Mugi", age: 3, toys:["mouse", "fly on stick", "catepillar"]})
TypeError: db.users.inserOne is not a function
test_db> db.users.insertOne({name:"Mugi", age: 3, toys:["mouse", "fly on stick", "catepillar"]})
{
  acknowledged: true,
  insertedId: ObjectId("6356f4ba200d78aa041edc16")
}
test_db> db.users.find({toys:{$in:"mouse"}})
MongoServerError: $in needs an array
test_db> db.users.find({toys:{$in:["mouse"]}})
[
  {
    _id: ObjectId("6356f4ba200d78aa041edc16"),
    name: 'Mugi',
    age: 3,
    toys: [ 'mouse', 'fly on stick', 'catepillar' ]
  }
]
test_db> db.userse.update({name:"Mugi", {$pop: {totys:(1)}})
Uncaught:
SyntaxError: Unexpected token (1:31)

> 1 | db.userse.update({name:"Mugi", {$pop: {totys:(1)}})
    |                                ^
  2 |

test_db> db.userse.update({name:"Mugi"}, {$pop: {totys:(1)}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}
test_db> db.users.find({name:"Mugi"})
[
  {
    _id: ObjectId("6356f4ba200d78aa041edc16"),
    name: 'Mugi',
    age: 3,
    toys: [ 'mouse', 'fly on stick', 'catepillar' ]
  }
]
test_db> db.userse.update({name:"Mugi"}, {$pop: {toys:(1)}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}
test_db> db.users.find({name:"Mugi"})
[
  {
    _id: ObjectId("6356f4ba200d78aa041edc16"),
    name: 'Mugi',
    age: 3,
    toys: [ 'mouse', 'fly on stick', 'catepillar' ]
  }
]
test_db> db.users.update({name:"Mugi"}, {$pop: {toys:(1)}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,

test_db> show dbs
admin     40.00 KiB
config   108.00 KiB
local     40.00 KiB
test_db   72.00 KiB
test_db> use my_first_db
switched to db my_first_db
my_first_db> db.createCollection("students")
my_first_db> db.students.insertMany({name:"Bobby", home_state:"WA", lucky_number: 6, birthday: {month:6, day:24, year:1991}}, {name:"Bobby", home_state:"WA", lucky_number: 6, birthday: {month:6, day:24, year:1991}},{name:"Bobby", home_stmy_first_db>

my_first_db> db.students.insertMany({name:"Bobby", home_state:"WA", lucky_number: 6, birthday: {month:6, day:24, year:1991}}, {name:"Hannah", home_state:"WA", lucky_number: 9, birthday: {month:9, day:26, year:1992}},{name:"Mugi", home_state:"CA", lucky_number: 7, birthday:{month:7, day:5, year:2019}})
MongoInvalidArgumentError: Argument "docs" must be an array of documents
my_first_db> db.students.insertMany([{name:"Bobby", home_state:"WA", lucky_number: 6, birthday: {month:6, day:24, year:1991}}, {name:"Hannah", home_state:"WA", lucky_number: 9, birthday: {month:9, day:26, year:1992}},{name:"Mugi", home_state:"CA", lucky_number: 7, birthday:{month:7, day:5, year:2019}}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("6356faf7200d78aa041edc17"),
    '1': ObjectId("6356faf7200d78aa041edc18"),
    '2': ObjectId("6356faf7200d78aa041edc19")
  }
}
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 }
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc18"),
    name: 'Hannah',
    home_state: 'WA',
    lucky_number: 9,
    birthday: { month: 9, day: 26, year: 1992 }
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc19"),
    name: 'Mugi',
    home_state: 'CA',
    lucky_number: 7,
    birthday: { month: 7, day: 5, year: 2019 }
  }
]
my_first_db> db.students.find({home_state:"WA"})
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 }
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc18"),
    name: 'Hannah',
    home_state: 'WA',
    lucky_number: 9,
    birthday: { month: 9, day: 26, year: 1992 }
  }
]
my_first_db> db.students.find({home_state:"CA"})
[
  {
    _id: ObjectId("6356faf7200d78aa041edc19"),
    name: 'Mugi',
    home_state: 'CA',
    lucky_number: 7,
    birthday: { month: 7, day: 5, year: 2019 }
  }
]
my_first_db> db.students.find({lucky_number:$gt:{3})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:34)

> 1 | db.students.find({lucky_number:$gt:{3})
    |                                   ^
  2 |

my_first_db> db.students.find({lucky_number:{$gt:3})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:38)

> 1 | db.students.find({lucky_number:{$gt:3})
    |                                       ^
  2 |

my_first_db> db.students.find({lucky_number:{$gt:3}})
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 }
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc18"),
    name: 'Hannah',
    home_state: 'WA',
    lucky_number: 9,
    birthday: { month: 9, day: 26, year: 1992 }
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc19"),
    name: 'Mugi',
    home_state: 'CA',
    lucky_number: 7,
    birthday: { month: 7, day: 5, year: 2019 }
  }
]
my_first_db> db.students.find({lucky_number:{$lte:10}})
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 }
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc18"),
    name: 'Hannah',
    home_state: 'WA',
    lucky_number: 9,
    birthday: { month: 9, day: 26, year: 1992 }
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc19"),
    name: 'Mugi',
    home_state: 'CA',
    lucky_number: 7,
    birthday: { month: 7, day: 5, year: 2019 }
  }
]
my_first_db> db.students.find({lucky_number:{$lte:7}})
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 }
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc19"),
    name: 'Mugi',
    home_state: 'CA',
    lucky_number: 7,
    birthday: { month: 7, day: 5, year: 2019 }
  }
]
my_first_db> db.students.find({$and: [ {lucky_number:{gt:1},{lucky_number:{lt:8} ]})
Uncaught:
SyntaxError: Unexpected token (1:47)

> 1 | db.students.find({$and: [ {lucky_number:{gt:1},{lucky_number:{lt:8} ]})
    |                                                ^
  2 |

my_first_db> db.students.find({$and: [ {lucky_number:{gt:1},{lucky_number:{lt:8}}]})
Uncaught:
SyntaxError: Unexpected token (1:47)

> 1 | db.students.find({$and: [ {lucky_number:{gt:1},{lucky_number:{lt:8}}]})
    |                                                ^
  2 |

my_first_db> db.students.find({$and: [ {lucky_number:{gt:1}},{lucky_number:{lt:8}}]})

my_first_db> db.students.find({$and: [ {lucky_number:{$gt:1}},{lucky_number:{$lt:8}}]})
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 }
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc19"),
    name: 'Mugi',
    home_state: 'CA',
    lucky_number: 7,
    birthday: { month: 7, day: 5, year: 2019 }
  }
]
my_first_db> db.students.update({},[{$set:{interests:["coding", "brunch", "mongodb"]}}])
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 },
    interests: [ 'coding', 'brunch', 'mongodb' ]
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc18"),
    name: 'Hannah',
    home_state: 'WA',
    lucky_number: 9,
    birthday: { month: 9, day: 26, year: 1992 }
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc19"),
    name: 'Mugi',
    home_state: 'CA',
    lucky_number: 7,
    birthday: { month: 7, day: 5, year: 2019 }
  }
]
my_first_db> db.students.update({},[,{$set:{interests:["coding", "brunch", "mongodb"]}},{$set:{interests:["coding", "brunch", "mongodb"]}}])
TypeError: Cannot convert undefined or null to object
my_first_db> db.students.update({},[{},{$set:{interests:["coding", "brunch", "mongodb"]}},{$set:{interests:["coding", "brunch", "mongodb"]}}])
MongoServerError: A pipeline stage specification object must contain exactly one field.
my_first_db> db.students.updateMany({},[{$set:{interests:["coding", "brunch", "mongodb"]}}])
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 3,
  modifiedCount: 2,
  upsertedCount: 0
}
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 },
    interests: [ 'coding', 'brunch', 'mongodb' ]
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc18"),
    name: 'Hannah',
    home_state: 'WA',
    lucky_number: 9,
    birthday: { month: 9, day: 26, year: 1992 },
    interests: [ 'coding', 'brunch', 'mongodb' ]
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc19"),
    name: 'Mugi',
    home_state: 'CA',
    lucky_number: 7,
    birthday: { month: 7, day: 5, year: 2019 },
    interests: [ 'coding', 'brunch', 'mongodb' ]
  }
]
my_first_db> db.students.updateOne({name:"Mugi"},[{$push:{interests:"eating"}}])
MongoServerError: Unrecognized pipeline stage name: '$push'
my_first_db> db.students.updateOne({name:"Mugi"},{$push:{interests:"eating"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 },
    interests: [ 'coding', 'brunch', 'mongodb' ]
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc18"),
    name: 'Hannah',
    home_state: 'WA',
    lucky_number: 9,
    birthday: { month: 9, day: 26, year: 1992 },
    interests: [ 'coding', 'brunch', 'mongodb' ]
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc19"),
    name: 'Mugi',
    home_state: 'CA',
    lucky_number: 7,
    birthday: { month: 7, day: 5, year: 2019 },
    interests: [ 'coding', 'brunch', 'mongodb', 'eating' ]
  }
]
my_first_db> db.students.updateOne({name:"Hannah"},{$push:{interests:"memeing"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
my_first_db> db.students.updateOne({name:"Bobby"},{$push:{interests:"gaming"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
my_first_db> db.students.updateOne({name:"Bobby"},{$push:{interests:"taxes"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 },
    interests: [ 'coding', 'brunch', 'mongodb', 'gaming', 'taxes' ]
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc18"),
    name: 'Hannah',
    home_state: 'WA',
    lucky_number: 9,
    birthday: { month: 9, day: 26, year: 1992 },
    interests: [ 'coding', 'brunch', 'mongodb', 'memeing' ]
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc19"),
    name: 'Mugi',
    home_state: 'CA',
    lucky_number: 7,
    birthday: { month: 7, day: 5, year: 2019 },
    interests: [ 'coding', 'brunch', 'mongodb', 'eating' ]
  }
]
my_first_db> db.students.updateOne({name:"Bobby"},{$pull:{interests:"taxes"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 },
    interests: [ 'coding', 'brunch', 'mongodb', 'gaming' ]
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc18"),
    name: 'Hannah',
    home_state: 'WA',
    lucky_number: 9,
    birthday: { month: 9, day: 26, year: 1992 },
    interests: [ 'coding', 'brunch', 'mongodb', 'memeing' ]
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc19"),
    name: 'Mugi',
    home_state: 'CA',
    lucky_number: 7,
    birthday: { month: 7, day: 5, year: 2019 },
    interests: [ 'coding', 'brunch', 'mongodb', 'eating' ]
  }
]
my_first_db> db.students.remove({home_state:"CA":})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:35)

> 1 | db.students.remove({home_state:"CA":})
    |                                    ^
  2 |

my_first_db> db.students.remove({home_state:"CA"})
{ acknowledged: true, deletedCount: 1 }
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 },
    interests: [ 'coding', 'brunch', 'mongodb', 'gaming' ]
  },
  {
    _id: ObjectId("6356faf7200d78aa041edc18"),
    name: 'Hannah',
    home_state: 'WA',
    lucky_number: 9,
    birthday: { month: 9, day: 26, year: 1992 },
    interests: [ 'coding', 'brunch', 'mongodb', 'memeing' ]
  }
]
my_first_db> db.students.remove({name:"Hannah"})
{ acknowledged: true, deletedCount: 1 }
my_first_db> db.students.insertOne({name:"Hanna", home_state:"CA", lucky_number:15, birthday:{month:9, day:26, year:1992}, interests:["coding", "brunch", "mongodb", "memeing"]})
{
  acknowledged: true,
  insertedId: ObjectId("63570162200d78aa041edc1a")
}
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 },
    interests: [ 'coding', 'brunch', 'mongodb', 'gaming' ]
  },
  {
    _id: ObjectId("63570162200d78aa041edc1a"),
    name: 'Hanna',
    home_state: 'CA',
    lucky_number: 15,
    birthday: { month: 9, day: 26, year: 1992 },
    interests: [ 'coding', 'brunch', 'mongodb', 'memeing' ]
  }
]
my_first_db> db.students.updateMany({}, {$set:{belts:0}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 2,
  modifiedCount: 2,
  upsertedCount: 0
}
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 },
    interests: [ 'coding', 'brunch', 'mongodb', 'gaming' ],
    belts: 0
  },
  {
    _id: ObjectId("63570162200d78aa041edc1a"),
    name: 'Hanna',
    home_state: 'CA',
    lucky_number: 15,
    birthday: { month: 9, day: 26, year: 1992 },
    interests: [ 'coding', 'brunch', 'mongodb', 'memeing' ],
    belts: 0
  }
]
my_first_db> db.students.updateMany({home_state:"WA"}, {$set:{belts:1}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 },
    interests: [ 'coding', 'brunch', 'mongodb', 'gaming' ],
    belts: 1
  },
  {
    _id: ObjectId("63570162200d78aa041edc1a"),
    name: 'Hanna',
    home_state: 'CA',
    lucky_number: 15,
    birthday: { month: 9, day: 26, year: 1992 },
    interests: [ 'coding', 'brunch', 'mongodb', 'memeing' ],
    belts: 0
  }
]
my_first_db> db.students.updateMany({}, {$rename:{"belts":"belts_earned")}})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:59)

> 1 | db.students.updateMany({}, {$rename:{"belts":"belts_earned")}})
    |                                                            ^
  2 |

my_first_db> db.students.updateMany({}, {$rename:{"belts":"belts_earned"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 2,
  modifiedCount: 2,
  upsertedCount: 0
}
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    lucky_number: 6,
    birthday: { month: 6, day: 24, year: 1991 },
    interests: [ 'coding', 'brunch', 'mongodb', 'gaming' ],
    belts_earned: 1
  },
  {
    _id: ObjectId("63570162200d78aa041edc1a"),
    name: 'Hanna',
    home_state: 'CA',
    lucky_number: 15,
    birthday: { month: 9, day: 26, year: 1992 },
    interests: [ 'coding', 'brunch', 'mongodb', 'memeing' ],
    belts_earned: 0
  }
]
my_first_db> db.students.updateMany({}, {$unset:{lucky_number:""}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 2,
  modifiedCount: 2,
  upsertedCount: 0
}
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    birthday: { month: 6, day: 24, year: 1991 },
    interests: [ 'coding', 'brunch', 'mongodb', 'gaming' ],
    belts_earned: 1
  },
  {
    _id: ObjectId("63570162200d78aa041edc1a"),
    name: 'Hanna',
    home_state: 'CA',
    birthday: { month: 9, day: 26, year: 1992 },
    interests: [ 'coding', 'brunch', 'mongodb', 'memeing' ],
    belts_earned: 0
  }
]
my_first_db> db.students.updateMany({}, {$set:{updated_on:"$$NOW"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 2,
  modifiedCount: 2,
  upsertedCount: 0
}
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    birthday: { month: 6, day: 24, year: 1991 },
    interests: [ 'coding', 'brunch', 'mongodb', 'gaming' ],
    belts_earned: 1,
    updated_on: '$$NOW'
  },
  {
    _id: ObjectId("63570162200d78aa041edc1a"),
    name: 'Hanna',
    home_state: 'CA',
    birthday: { month: 9, day: 26, year: 1992 },
    interests: [ 'coding', 'brunch', 'mongodb', 'memeing' ],
    belts_earned: 0,
    updated_on: '$$NOW'
  }
]
my_first_db> db.students.updateMany({}, {$set:{$currentDate:{updated_on:{$type:"date"}}}})
MongoServerError: The dollar ($) prefixed field '$currentDate' in '$currentDate' is not allowed in the context of an update's replacement document. Consider using an aggregation pipeline with $replaceWith.
my_first_db> db.students.updateMany({}, {$unset:{update_on:""}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 2,
  modifiedCount: 0,
  upsertedCount: 0
}
my_first_db> db.students.updateMany({}, {$set:{$currentDate:{updated_on:{$type:"date"}}}})
MongoServerError: The dollar ($) prefixed field '$currentDate' in '$currentDate' is not allowed in the context of an update's replacement document. Consider using an aggregation pipeline with $replaceWith.
my_first_db> db.students.updateMany({}, {$currentDate:{updated_on:{$type:"date"}}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 2,
  modifiedCount: 2,
  upsertedCount: 0
}
my_first_db> db.students.find()
[
  {
    _id: ObjectId("6356faf7200d78aa041edc17"),
    name: 'Bobby',
    home_state: 'WA',
    birthday: { month: 6, day: 24, year: 1991 },
    interests: [ 'coding', 'brunch', 'mongodb', 'gaming' ],
    belts_earned: 1,
    updated_on: ISODate("2022-10-24T21:39:35.550Z")
  },
  {
    _id: ObjectId("63570162200d78aa041edc1a"),
    name: 'Hanna',
    home_state: 'CA',
    birthday: { month: 9, day: 26, year: 1992 },
    interests: [ 'coding', 'brunch', 'mongodb', 'memeing' ],
    belts_earned: 0,
    updated_on: ISODate("2022-10-24T21:39:35.550Z")
  }
]
my_first_db>